---
name: Helm Manifests Diff for ArgoCD
on:
  pull_request:
    branches:
      - main

jobs:
  helm-diff:
    runs-on: self-hosted
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dyff
        run: |
          set +e
          dyff version
          if [[ $? = 0 ]]
          then
            echo -e "${CYAN}[ INFO ] > Dyff already installed${BLANK}"
          else
            VERSION="1.9.0"
            echo -e "${YELLOW}[ EXECUTING ] > Installing Dyff $VERSION${BLANK}"
            wget -q https://github.com/homeport/dyff/releases/download/v${VERSION}/dyff_${VERSION}_linux_amd64.tar.gz
            tar -xzvf dyff_${VERSION}_linux_amd64.tar.gz
            sudo mv dyff /usr/local/bin
          fi
        shell: bash
        env:
          RED: \033[1;31m
          GREEN: \033[1;32m
          YELLOW: \033[1;33m
          BLUE: \033[1;34m
          PURPLE: \033[1;35m
          CYAN: \033[1;36m
          BLANK: \033[0m

      - name: Find modified Chart.yaml files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            **/Chart.yaml

      - name: Generate diffs for each Chart
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          # Function to get the latest version matching a pattern
          get_latest_version() {
            local repo=$1
            local chart=$2
            local pattern=$3
            helm search repo $repo/$chart -o json | jq -r ".[].version" | grep "^$pattern" | sort -V | tail -n 1
          }
          mkdir -p temp
          echo "CHART_FILES=${ALL_CHANGED_FILES}"
          
          for file in ${ALL_CHANGED_FILES}; do
            echo "Processing $file"
            
            # Get chart directory
            CHART_DIR=$(dirname "$file")
            
            # Extract info from PR version
            CHART_NAME=$(yq e '.name' "$file")
            CHART_VERSION=$(yq e '.version' "$file")

            echo "chart infos : dir -> $CHART_DIR name -> $CHART_NAME version -> $CHART_VERSION"
            
            for dep in $(yq e -o=j -I=0 '.dependencies[]' "$file")
            do
              echo "$dep" | jq -C
              DEP_NAME=$(echo "$dep" | jq -r '.name')
              DEP_VERSION=$(echo "$dep" | jq -r '.version')
              DEP_REPO=$(echo "$dep" | jq -r '.repository')
              helm repo add "$DEP_NAME" "$DEP_REPO"
            done

            helm repo update
            # Generate PR manifest
            helm dependency update "$CHART_DIR"
            helm template "$CHART_NAME" "$CHART_DIR" > "temp/pr_manifest_pr.yaml"
            yq e -C temp/pr_manifest_pr.yaml
            
            # Get main branch version and generate manifest
            git checkout origin/main -- "$file"
            MAIN_CHART_VERSION=$(yq e '.version' "$file")
            
            # Process dependencies for main version
            for dep in $(yq e -o=j -I=0 '.dependencies[]' "$file")
            do
              echo "$dep" | jq -C
              DEP_NAME=$(echo "$dep" | jq -r '.name')
              DEP_VERSION=$(echo "$dep" | jq -r '.version')
              DEP_REPO=$(echo "$dep" | jq -r '.repository')
              helm repo add "$DEP_NAME" "$DEP_REPO"
            done
            
            helm dependency update "$CHART_DIR"
            helm template "$CHART_NAME" "$CHART_DIR" > "temp/main_manifest_main.yaml"
            yq e -C temp/main_manifest_main.yaml

            # Reset to PR state
            # git checkout -
          done

      - name: Generate dyff on release
        id: dyff-helm
        uses: ixxeL-DevOps/gha-templates/.github/actions/dyff@main
        with:
          first-file: temp/pr_manifest_pr.yaml
          second-file: temp/main_manifest_main.yaml

      - name: Comment on PR for helm dyff
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          DYFF_RESULTS: ${{ steps.dyff-helm.outputs.DYFF_RESULT }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### Dyff helm: \`chart helm dyff\`
            \`\`\`py
            ${process.env.DYFF_RESULTS}
            \`\`\`
            `;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            })
